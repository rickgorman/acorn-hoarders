{"version":3,"sources":["webpack:///webpack/bootstrap 424fd395ec190a438f77","webpack:///./lib/occupants/occupant.js","webpack:///./lib/sim.js","webpack:///./lib/board.js","webpack:///./lib/generation_runner.js","webpack:///./lib/occupants/null_occupant.js","webpack:///./lib/cell.js","webpack:///./lib/occupants/squirrel.js","webpack:///./node_modules/bit-array/lib/bit-typed-array.js","webpack:///./lib/occupants/acorn_pile.js","webpack:///./lib/occupants/grassy_patch.js"],"names":["OCCUPANT_TYPE_MAX","Occupant","cell","color","renderText","newCell","occupant","alert","Neat","neataptic","Methods","methods","Architect","architect","FRAME_RATE","MAX_GENERATIONS","GRID_SIZE","BOARD_WIDTH","POPULATION_SIZE","MUTATION_RATE","ELITISM_PERCENT","INPUT_NEURON_COUNT","OUTPUT_NEURON_COUNT","Sim","canvas","ctx","getContext","generation","inputNeuronCount","outputNeuronCount","populationSize","mutationRate","elitism","Math","min","round","options","mutation","ADD_NODE","SUB_NODE","ADD_CONN","SUB_CONN","MOD_WEIGHT","MOD_BIAS","MOD_ACTIVATION","ADD_GATE","SUB_GATE","ADD_SELF_CONN","SUB_SELF_CONN","ADD_BACK_CONN","SUB_BACK_CONN","popsize","neat","createNeat","gr","runGeneration","document","getElementById","width","height","window","sim","run","CELL_WIDTH","SPRITE_WIDTH","CELL_PADDING","OCCUPANT_TYPE_OUT_OF_BOUNDS","Board","generationRunner","squirrelBrains","setupBoard","spawnEmptyCells","spawnAcornPiles","spawnGrassyPatches","spawnSquirrels","grid","row","col","push","callback","forEach","e","tick","clearRect","render","x","y","isEmpty","floor","random","klass","xyCoords","rest","instance","receiveVisitor","brain","_spawnOccupant","i","length","spawnSquirrel","randomEmptyLocationNearBottom","quantity","randomEmptyLocationNearTop","spawnAcornPile","spawnGrassyPatch","xyPos","xyDelta","destX","destY","isOutOfBounds","getOccupantType","getType","squirrels","FRAMES_PER_GENERATION","GenerationRunner","bind","currentGeneration","showRendering","frameRate","setHotKeys","framesElapsed","tickHandle","brains","population","board","resetGeneration","newBrains","eliteBrains","sort","sumScores","score","avgScore","console","log","toFixed","memories","getSquirrels","map","squirrel","memory","getOffspring","mutate","finalPopulation","concat","endGeneration","setTimeout","addEventListener","event","keyName","key","preventDefault","toggleRendering","exportState","importState","exportedBrains","toJSON","localStorage","setItem","JSON","stringify","importedBrainsJSON","parse","getItem","importedBrains","Network","fromJSON","brainJSON","importedGeneration","parseInt","cancelAnimationFrame","handle","clearTimeout","nodes","OCCUPANT_TYPE_NULL","NullOccupant","visitor","changeCell","Cell","_ctx","xPos","yPos","fillStyle","fillRect","font","textAlign","textBaseline","fillText","constructor","name","moveOccupant","peekAtNeighboringCell","OCCUPANT_TYPE_SQUIRREL","SET_MEMORY_OUTPUT_INDEX","MOVE_OUTPUT_INDEX","MAX_MEMORY_VALUE","Squirrel","distanceTraveled","acorns","stashedAcorns","cheekCapacity","senseWorld","react","updateScore","updateColor","inputs","outputs","activate","optionallySetMemory","move","getNextMove","signal","isNaN","Number","MAX_SAFE_INTEGER","receiveAcorn","OCCUPANT_TYPE_ACORN_PILE","AcornPile","OCCUPANT_TYPE_GRASSY_PATCH","GrassyPatch","stashAcorns"],"mappings":"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;AACnB,eAAKA,MAAL,IAAe,CAAf;AACAtB,kBAAQuC,YAAR;AACD;AACF;AACF;;;;;;kBAGYnB,Q;;;;;;ACzLf;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;;AAEA,uBAAuB,sBAAsB;AAC7C;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,mBAAmB,2BAA2B;AAC9C;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,2BAA2B;AAC9C;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,EAAE;AACF;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA,mBAAmB,2BAA2B;AAC9C;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;;AAEA;AACA;AACA;AACA;AACA;AACA,mBAAmB,iBAAiB;AACpC;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,mBAAmB,2BAA2B;AAC9C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,mBAAmB,2BAA2B;AAC9C;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,2BAA2B;AAC9C;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,2BAA2B;AAC9C;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,2BAA2B;AAC9C;AACA;AACA;AACA;;AAEA;;;;;;;;;;;;;;;;;ACtPA;;;;;;;;;;;;AAEO,IAAMoB,8DAA2B,CAAjC;;IAEDC,S;;;AACJ,qBAAYtN,IAAZ,EAAkB;AAAA;;AAAA,sHACVA,IADU;;AAEhB,UAAKC,KAAL,GAAa,SAAb;AAFgB;AAGjB;;;;mCAEc4K,O,EAAS;AACtBA,cAAQuC,YAAR;AACD;;;8BAES;AACR,aAAOC,wBAAP;AACD;;;;;;kBAGYC,S;;;;;;;;;;;;;;;;ACnBf;;;;;;;;;;;;AAEO,IAAMC,kEAA6B,CAAnC;;IAEDC,W;;;AACJ,uBAAYxN,IAAZ,EAAkB;AAAA;;AAAA,0HACVA,IADU;;AAEhB,UAAKC,KAAL,GAAa,SAAb;AAFgB;AAGjB;;;;mCAEc4K,O,EAAS;AACtBA,cAAQ4C,WAAR;AACD;;;8BAES;AACR,aAAOF,0BAAP;AACD;;;;;;kBAIYC,W","file":"bundle-sim.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, {\n \t\t\t\tconfigurable: false,\n \t\t\t\tenumerable: true,\n \t\t\t\tget: getter\n \t\t\t});\n \t\t}\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 1);\n\n\n\n// WEBPACK FOOTER //\n// webpack/bootstrap 424fd395ec190a438f77","import NullOccupant from './null_occupant';\n\n// number of different types of occupants\nexport const OCCUPANT_TYPE_MAX = 5;\n\nclass Occupant {\n  constructor(cell) {\n    this.color = \"#cc0000\";\n    this.cell = cell;\n    this.renderText = \"\";\n  }\n\n  tick() {\n\n  }\n\n  changeCell(newCell) {\n    // leave old cell\n    this.cell.occupant = new NullOccupant(this.cell);\n\n    // enter new cell\n    newCell.occupant = this;\n    this.cell = newCell;\n  }\n\n  receiveVisitor() {\n    // intentionally left blank\n  }\n\n  getType() {\n    alert('getType not implemented in child');\n  }\n\n}\n\nexport default Occupant;\n\n\n\n// WEBPACK FOOTER //\n// ./lib/occupants/occupant.js","import GenerationRunner from './generation_runner';\n\nconst Neat = neataptic.Neat;\nconst Methods = neataptic.methods;\nconst Architect = neataptic.architect;\n\nimport { CELL_WIDTH } from './board';\n\nimport Board from './board.js';\n\n// speed constants\nexport const FRAME_RATE = 30;\n\n// sim constants\nexport const MAX_GENERATIONS = 100000;\n\n// board constants\nexport const GRID_SIZE = 20;\nexport const BOARD_WIDTH = GRID_SIZE * CELL_WIDTH;\n\n// neat constants\nexport const POPULATION_SIZE = 15;\nconst MUTATION_RATE = 0.25;\nconst ELITISM_PERCENT = 0.1;\nconst INPUT_NEURON_COUNT = 11; // hard-coded from squirrel.js\nconst OUTPUT_NEURON_COUNT = 2; // ditto\n\nclass Sim {\n  constructor(canvas) {\n    // set up a drawing context\n    this.ctx = canvas.getContext('2d');\n\n    this.generation = 0;\n\n    // Neat options\n    this.inputNeuronCount  = INPUT_NEURON_COUNT;\n    this.outputNeuronCount = OUTPUT_NEURON_COUNT;\n    this.populationSize = POPULATION_SIZE;\n    this.mutationRate = MUTATION_RATE;\n    this.elitism = Math.min(2, Math.round(ELITISM_PERCENT * POPULATION_SIZE));\n  }\n\n  createNeat() {\n    const options = {\n      mutation: [\n        Methods.mutation.ADD_NODE,\n        Methods.mutation.SUB_NODE,\n        Methods.mutation.ADD_CONN,\n        Methods.mutation.SUB_CONN,\n        Methods.mutation.MOD_WEIGHT,\n        Methods.mutation.MOD_BIAS,\n        Methods.mutation.MOD_ACTIVATION,\n        Methods.mutation.ADD_GATE,\n        Methods.mutation.SUB_GATE,\n        Methods.mutation.ADD_SELF_CONN,\n        Methods.mutation.SUB_SELF_CONN,\n        Methods.mutation.ADD_BACK_CONN,\n        Methods.mutation.SUB_BACK_CONN\n      ],\n      popsize: this.populationSize,\n      mutationRate: this.mutationRate,\n      elitism: this.elitism,\n    };\n\n    // create Neat\n    return new Neat(\n      this.inputNeuronCount,\n      this.outputNeuronCount,\n      null,\n      options\n    );\n  }\n\n  run() {\n    this.neat = this.createNeat();\n\n    // run many generations\n    let gr = new GenerationRunner(this.ctx, this.neat);\n    gr.runGeneration();\n  }\n\n}\n\n// entry\nlet canvas = document.getElementById('canvas');\ncanvas.width = BOARD_WIDTH;\ncanvas.height = BOARD_WIDTH;\n\nwindow.sim = new Sim(canvas);\nwindow.sim.run();\n\n\n\n// WEBPACK FOOTER //\n// ./lib/sim.js","import Cell from './cell.js';\nimport Squirrel from './occupants/squirrel';\nimport AcornPile from './occupants/acorn_pile';\nimport GrassyPatch from './occupants/grassy_patch';\n\nimport {\n  BOARD_WIDTH,\n  GRID_SIZE\n} from './sim.js';\n\nimport {\n  OCCUPANT_TYPE_SQUIRREL\n} from './occupants/squirrel.js';\n\nexport const CELL_WIDTH = 30;\nexport const SPRITE_WIDTH = CELL_WIDTH - 2;\nexport const CELL_PADDING = (CELL_WIDTH - SPRITE_WIDTH) / 2;\n\n// occupant type\nexport const OCCUPANT_TYPE_OUT_OF_BOUNDS = 0;\n\nclass Board {\n  constructor(generationRunner, squirrelBrains) {\n    this.generationRunner = generationRunner;\n\n    // store drawing context\n    this.ctx = generationRunner.ctx;\n\n    this.squirrelBrains = squirrelBrains;\n\n    this.setupBoard();\n  }\n\n  setupBoard() {\n    this.spawnEmptyCells();\n    this.spawnAcornPiles(4);\n    this.spawnGrassyPatches(4);\n    this.spawnSquirrels();\n  }\n\n  spawnEmptyCells() {\n    this.grid = [];\n    let row;\n    let col;\n    for(row = 0; row < GRID_SIZE; row++) {\n      this.grid.push([]);\n\n      for(col = 0; col < GRID_SIZE; col++) {\n        let cell = new Cell(this, this.ctx, col, row);\n        this.grid[row].push(cell);\n      }\n    }\n  }\n\n  forEach(callback) {\n    let row, col;\n    for(row = 0; row < GRID_SIZE; row++) {\n      for(col = 0; col < GRID_SIZE; col++) {\n        callback(this.grid[row][col]);\n      }\n    }\n  }\n\n  tick() {\n    // tick each cell\n    this.forEach((e) => e.tick());\n  }\n\n  render() {\n    // clear entire board\n    this.ctx.clearRect(0, 0, BOARD_WIDTH, BOARD_WIDTH);\n\n    // render each cell\n    this.forEach((e) => e.render());\n  }\n\n  randomEmptyLocationNearBottom() {\n    let [x, y] = [0, GRID_SIZE - 1];\n    while(!this.grid[y][x].isEmpty()) {\n      x = Math.floor( Math.random() * GRID_SIZE );\n      y = (GRID_SIZE - 5) + Math.floor( Math.random() * 5 );\n    }\n    return [x, y];\n  }\n\n  randomEmptyLocationNearTop() {\n    let [x, y] = [0, 0];\n    while(!this.grid[y][x].isEmpty()) {\n      x = Math.floor( Math.random() * GRID_SIZE );\n      y = Math.floor( Math.random() * 5 );\n    }\n    return [x, y];\n  }\n\n  _spawnOccupant(klass, xyCoords, ...rest) {\n    const [x, y] = xyCoords;\n    const instance = new klass(this.grid[x][y], ...rest);\n    this.grid[y][x].receiveVisitor(instance);\n\n    return instance;\n  }\n\n  spawnSquirrel(xyCoords, brain) {\n    return this._spawnOccupant(Squirrel, xyCoords, brain);\n  }\n\n  spawnAcornPile(xyCoords) {\n    return this._spawnOccupant(AcornPile, xyCoords);\n  }\n\n  spawnGrassyPatch(xyCoords) {\n    return this._spawnOccupant(GrassyPatch, xyCoords);\n  }\n\n  spawnSquirrels() {\n    for (let i = 0; i < this.squirrelBrains.length; i++) {\n      this.spawnSquirrel(\n        this.randomEmptyLocationNearBottom(),\n        this.squirrelBrains[i]\n      );\n    }\n  }\n\n  spawnAcornPiles(quantity) {\n    let x, y;\n    for(let i = 0; i < quantity; i++) {\n      let xyCoords = this.randomEmptyLocationNearTop();\n      this.spawnAcornPile(xyCoords);\n    }\n  }\n\n  spawnGrassyPatches(quantity) {\n    for(let i=0; i<quantity/2; i++) {\n      let xyCoords = this.randomEmptyLocationNearTop();\n      this.spawnGrassyPatch(xyCoords);\n      xyCoords = this.randomEmptyLocationNearBottom();\n      this.spawnGrassyPatch(xyCoords);\n    }\n  }\n\n  isOutOfBounds(xyPos) {\n    let [x, y] = xyPos;\n\n    if (x < 0 || y < 0 || x >= GRID_SIZE || y >= GRID_SIZE ) {\n      return true;\n    } else {\n      return false;\n    }\n  }\n\n  moveOccupant(cell, xyDelta) {\n    let [x, y] = xyDelta;\n    const [destX, destY] = [cell.x + x, cell.y + y];\n\n    // check for out-of-bounds\n    if (this.isOutOfBounds([destX, destY])) {\n      return false;\n    }\n\n    // allow the destination cell to receive this cell's occupant\n    return this.grid[destY][destX].receiveVisitor(cell.occupant);\n  }\n\n  peekAtNeighboringCell(cell, xyDelta) {\n    let [x, y] = xyDelta;\n    const xyPos = [cell.x + x, cell.y + y];\n\n    return this.getOccupantType(xyPos);\n  }\n\n  getOccupantType(xyPos) {\n    if (this.isOutOfBounds(xyPos)) {\n      return OCCUPANT_TYPE_OUT_OF_BOUNDS;\n    } else {\n      let [x, y] = xyPos;\n      return this.grid[y][x].occupant.getType();\n    }\n  }\n\n  getSquirrels() {\n    let squirrels = [];\n    this.forEach( cell => {\n      if(cell.occupant.getType() === OCCUPANT_TYPE_SQUIRREL) {\n        squirrels.push(cell.occupant);\n      }\n    });\n\n    return squirrels;\n  }\n}\n\nexport default Board;\n\n\n\n// WEBPACK FOOTER //\n// ./lib/board.js","import Board from './board';\n\nconst Methods = neataptic.methods;\n\nimport {\n  MAX_GENERATIONS,\n  POPULATION_SIZE,\n  FRAME_RATE\n} from './sim.js';\n\nexport const FRAMES_PER_GENERATION = 30 * 3;\n\nclass GenerationRunner {\n  constructor(ctx, neat) {\n    // binds\n    this.tick = this.tick.bind(this);\n\n    this.ctx = ctx;\n    this.neat = neat;\n\n    // track generations\n    this.currentGeneration = 0;\n\n    // toggle for rendering (vs running silently/faster)\n    this.showRendering = true;\n    this.frameRate = FRAME_RATE;\n\n    this.setHotKeys();\n  }\n\n  resetGeneration() {\n    this.framesElapsed = 0;\n    this.tickHandle = null;\n  }\n\n  runGeneration() {\n    let brains = [];\n    for(let i = 0; i < this.neat.population.length; i++) {\n      brains.push(this.neat.population[i]);\n    }\n\n    this.board = new Board(this, brains);\n\n    this.resetGeneration();\n    this.tick();\n  }\n\n  endGeneration() {\n    let newBrains = [];\n\n    let eliteBrains = [];\n    // save the best specimens\n    this.neat.sort();\n    for(let i = 0; i < this.neat.elitism; i++) {\n      eliteBrains.push(this.neat.population[i]);\n    }\n\n    // log some output\n    let sumScores = 0;\n    for(let i = 0; i < this.neat.population.length; i++) {\n      sumScores += this.neat.population[i].score;\n    }\n    let avgScore = Math.round(sumScores / this.neat.population.length);\n    console.log(`Gen: ${this.currentGeneration} Best: ${this.neat.population[0].score.toFixed(2)} Average: ${avgScore}`);\n    let memories = this.board.getSquirrels().map( squirrel => squirrel.memory );\n    // console.log(memories);\n\n\n    // breed new specimens\n    for(let i = 0; i < this.neat.popsize - this.neat.elitism; i++) {\n      newBrains.push(this.neat.getOffspring());\n    }\n\n    // replace the old population with the new\n    this.neat.population = newBrains;\n    this.neat.mutate();\n\n    // restore the best specimens\n    let finalPopulation = newBrains.concat(eliteBrains);\n    this.neat.population = finalPopulation;\n\n    // zero out scores\n    for(let i = 0; i < this.neat.popsize; i++) {\n      this.neat.population[i].score = 0;\n    }\n\n    // run until we hit MAX_GENERATIONS\n    this.currentGeneration += 1;\n    if (this.currentGeneration < MAX_GENERATIONS) {\n      this.runGeneration();\n    } else {\n      return true;\n    }\n  }\n\n  tick() {\n    // advance board state\n    this.board.tick();\n    if (this.showRendering) {\n      this.board.render();\n    }\n\n    // end after set number of frames\n    this.framesElapsed += 1;\n    if (this.framesElapsed >= FRAMES_PER_GENERATION) {\n      this.endGeneration();\n    } else {\n      if (this.showRendering) {\n        // this.tickHandle = requestAnimationFrame(this.tick);\n        this.tickHandle = setTimeout(this.tick, 1000 / this.frameRate);\n      } else {\n        this.tickHandle = setTimeout(this.tick, 0);\n      }\n    }\n  }\n\n  setHotKeys() {\n    document.addEventListener('keydown', function (event) {\n      const keyName = event.key;\n      switch (keyName) {\n        // toggle rendering\n        case \"ArrowUp\":\n          event.preventDefault();\n          this.toggleRendering();\n          break;\n\n        // save state\n        case \"ArrowLeft\":\n          event.preventDefault();\n          this.exportState();\n          break;\n\n        // load state\n        case \"ArrowRight\":\n          event.preventDefault();\n          this.importState();\n          break;\n\n        // open debugger\n        case \"ArrowDown\":\n          event.preventDefault();\n          debugger\n        default:\n\n      }\n    }.bind(this));\n  }\n\n  toggleRendering() {\n    if(this.showRendering) {\n      this.showRendering = false;\n      console.log('rendering disabled');\n    } else {\n      this.showRendering = true;\n      console.log('rendering enabled');\n    }\n  }\n\n  exportState() {\n    let exportedBrains =\n      this.neat.population.map(brain => brain.toJSON());\n    window.localStorage.setItem('brains', JSON.stringify(exportedBrains));\n\n    window.localStorage.setItem('generation', this.currentGeneration);\n    console.log('current genomes stored');\n  }\n\n  importState() {\n    let importedBrainsJSON = JSON.parse(window.localStorage.getItem('brains'));\n    let importedBrains =\n      importedBrainsJSON.map( brainJSON => neataptic.Network.fromJSON(brainJSON) );\n\n    let importedGeneration =\n      parseInt(window.localStorage.getItem('generation'));\n\n    if (importedBrains !== null && importedGeneration !== null) {\n      if(this.showRendering) {\n        cancelAnimationFrame(this.handle);\n      } else {\n        clearTimeout(this.handle);\n      }\n      this.neat.population = importedBrains;\n      this.currentGeneration = importedGeneration;\n      console.log('prior genomes loaded and running');\n      console.log(this.neat.population[0].nodes[0]);\n\n      this.resetGeneration();\n      this.runGeneration();\n    } else {\n      console.log('unable to restore state: item is null');\n    }\n  }\n\n}\n\nexport default GenerationRunner;\n\n\n\n// WEBPACK FOOTER //\n// ./lib/generation_runner.js","import Occupant from './occupant.js';\n\nexport const OCCUPANT_TYPE_NULL = 1;\n\nclass NullOccupant extends Occupant {\n  constructor(cell) {\n    super(cell);\n    this.color = \"#aaccaa\";\n  }\n\n  tick() {\n    // intentionally left blank\n  }\n\n  receiveVisitor(visitor) {\n    visitor.changeCell(this.cell);\n  }\n\n  getType() {\n    return OCCUPANT_TYPE_NULL;\n  }\n}\n\nexport default NullOccupant;\n\n\n\n// WEBPACK FOOTER //\n// ./lib/occupants/null_occupant.js","import NullOccupant from './occupants/null_occupant';\n\nimport {\n  SPRITE_WIDTH,\n  CELL_PADDING,\n  CELL_WIDTH\n} from './board.js';\n\nclass Cell {\n  constructor(board, ctx, x, y) {\n    // construct an empty cell\n    this.occupant = new NullOccupant(this);\n\n    this.board = board;\n    this._ctx = ctx;\n\n    this.x = x;\n    this.y = y;\n  }\n\n  tick() {\n    this.occupant.tick();\n  }\n\n  render() {\n    let xPos = this.x * CELL_WIDTH;\n    let yPos = this.y * CELL_WIDTH;\n\n    this._ctx.fillStyle = this.occupant.color;\n\n    this._ctx.fillRect(\n      (xPos) + CELL_PADDING,\n      (yPos) + CELL_PADDING,\n      SPRITE_WIDTH,\n      SPRITE_WIDTH\n    );\n\n    this._ctx.fillStyle = \"#000000\";\n    this._ctx.font = \"11px bold Arial\";\n    this._ctx.textAlign = \"center\";\n    this._ctx.textBaseline = \"hanging\";\n    this._ctx.fillText(\n      this.occupant.renderText,\n      xPos + CELL_WIDTH / 2,\n      yPos + 3\n    );\n  }\n\n  isEmpty() {\n    return this.occupant.constructor.name === \"NullOccupant\";\n  }\n\n  moveOccupant(xyDelta) {\n    return this.board.moveOccupant(this, xyDelta);\n  }\n\n  peekAtNeighboringCell(xyDelta) {\n    return this.board.peekAtNeighboringCell(this, xyDelta);\n  }\n\n  receiveVisitor(visitor) {\n    return this.occupant.receiveVisitor(visitor);\n  }\n}\n\nexport default Cell;\n\n\n\n// WEBPACK FOOTER //\n// ./lib/cell.js","import Occupant from './occupant.js';\nimport BitArray from 'bit-array';\n\nimport { OCCUPANT_TYPE_MAX } from './occupant';\nimport { FRAMES_PER_GENERATION } from '../generation_runner';\nimport { GRID_SIZE } from '../sim';\n\nexport const OCCUPANT_TYPE_SQUIRREL = 2;\nconst SET_MEMORY_OUTPUT_INDEX = 0;\nconst MOVE_OUTPUT_INDEX = 1;\n\nconst MAX_MEMORY_VALUE = 256*256;\n\nclass Squirrel extends Occupant {\n  constructor(cell, brain) {\n    super(cell);\n\n    this.brain = brain;\n\n    this.color = \"#bb6666\";\n\n    this.distanceTraveled = 0;\n    this.acorns = 0;\n    this.stashedAcorns = 0;\n    this.cheekCapacity = 5;\n\n    this.memory = Math.floor(Math.random() * MAX_MEMORY_VALUE);\n  }\n\n  tick() {\n    this.senseWorld();\n\n    // pulse the brain\n    this.react();\n\n    this.updateScore();\n    this.updateColor();\n\n    if(this.brain.score < 1) {\n      this.renderText = this.brain.score;\n    } else {\n      this.renderText = Math.floor(this.brain.score);\n    }\n\n  }\n\n  // return an array of values normalized between 0 and 1\n  senseWorld() {\n    this.inputs = [];\n    // collect memory, value is between:\n    //   [0, MAX_MEMORY_VALUE]\n    this.inputs.push(this.memory / MAX_MEMORY_VALUE);\n\n    // collect vision from one cell N/E/S/W of squirrel, range\n    //   [0, OCCUPANT_TYPE_MAX]\n    this.inputs.push( this.cell.peekAtNeighboringCell([-1, 0]) /\n      OCCUPANT_TYPE_MAX );\n    this.inputs.push( this.cell.peekAtNeighboringCell([0, 1]) /\n      OCCUPANT_TYPE_MAX );\n    this.inputs.push( this.cell.peekAtNeighboringCell([1, 0]) /\n      OCCUPANT_TYPE_MAX );\n    this.inputs.push( this.cell.peekAtNeighboringCell([0, -1]) /\n      OCCUPANT_TYPE_MAX );\n\n    // collect percent of acorn capacity, range:\n    //   [0, 1]\n    this.inputs.push( this.acorns / this.cheekCapacity );\n\n    // collect acorns held, range:\n    //   [0, FRAMES_PER_GENERATION]\n    this.inputs.push( this.acorns / FRAMES_PER_GENERATION );\n\n    // collect acorns stashed, range:\n    //   [0, FRAMES_PER_GENERATION]\n    this.inputs.push( this.stashedAcorns / FRAMES_PER_GENERATION );\n\n    // collect x/y position, range:\n    //   [0, GRID_SIZE]\n    this.inputs.push( this.cell.x / GRID_SIZE );\n    this.inputs.push( this.cell.y / GRID_SIZE );\n\n    // collect current frame, range:\n    //   [0, FRAMES_PER_GENERATION]\n    // TODO: Why is this starting at 50??\n    this.inputs.push( this.cell.board.generationRunner.framesElapsed /\n      FRAMES_PER_GENERATION );\n  }\n\n  react() {\n    let outputs = this.brain.activate(this.inputs);\n    this.optionallySetMemory(outputs[SET_MEMORY_OUTPUT_INDEX]);\n    this.move( this.getNextMove(outputs[MOVE_OUTPUT_INDEX]) );\n  }\n\n  optionallySetMemory(signal) {\n    if(signal < 0) {\n      // no-op\n    } else if(isNaN(signal)) {\n      // no-op\n    } else if(signal > Number.MAX_SAFE_INTEGER) {\n      this.memory = Number.MAX_SAFE_INTEGER;\n    } else {\n      this.memory = signal;\n    }\n  }\n\n  getNextMove(signal) {\n    if(signal <= 0.25) {\n      return [0, -1];\n    } else if(signal < 0.50) {\n      return [1, 0];\n    } else if(signal >= 0.50 && signal <= 0.75) {\n      return [0, 1];\n    } else {\n      return [-1, 0];\n    }\n  }\n\n  updateScore() {\n    this.brain.score =\n      this.stashedAcorns * 100 +\n      Number(this.acorns) * 1 +\n      this.distanceTraveled * 0.01;\n  }\n\n  updateColor() {\n    // update the color\n    switch (this.acorns) {\n      case 0:\n        this.color = \"#f5a98e\";\n        break;\n      case 1:\n        this.color = \"#ee7757\";\n        break;\n      case 2:\n        this.color = \"#eb593d\";\n        break;\n      case 3:\n        this.color = \"#e73a27\";\n        break;\n      case 4:\n        this.color = \"#e5231e\";\n        break;\n      case 5:\n        this.color = \"#ff0000\";\n        break;\n\n      default:\n    }\n  }\n\n  move(xyDelta) {\n    this.cell.moveOccupant(xyDelta);\n  }\n\n  changeCell(newCell) {\n    this.distanceTraveled += 1;\n    return super.changeCell(newCell);\n  }\n\n  receiveAcorn() {\n    if(this.acorns < this.cheekCapacity) {\n      this.acorns += 1;\n    }\n  }\n\n  stashAcorns() {\n    this.stashedAcorns += this.acorns;\n    this.acorns = 0;\n  }\n\n  getType() {\n    return OCCUPANT_TYPE_SQUIRREL;\n  }\n\n  receiveVisitor(visitor) {\n    if(Math.floor(Math.random() * 2) === 0) {\n      if(this.acorns >= 1) {\n        this.acorns -= 1;\n        visitor.receiveAcorn();\n      }\n    }\n  }\n}\n\nexport default Squirrel;\n\n\n\n// WEBPACK FOOTER //\n// ./lib/occupants/squirrel.js","/**\n * JavaScript BitArray - v0.2.0\n *\n * Licensed under the revised BSD License.\n * Copyright 2010-2012 Bram Stein\n * All rights reserved.\n */\n\n/**\n * Creates a new empty BitArray with the given length or initialises the BitArray with the given hex representation.\n */\nvar BitArray = function (size, hex) {\n    this.length = size;\n    this.buffer = new ArrayBuffer(Math.ceil(this.length / 32) * 4);\n    this.wordArray = new Uint32Array(this.buffer);\n\n    if (hex) {\n        hex = hex.slice(/^0x/.exec(hex) ? 2 : 0);\n\n        if (hex.length * 4 > this.length) {\n            throw 'Hex value is too large for this bit array.'\n        } else if (hex.length * 4 < this.length) {\n            // pad it\n            while(hex.length * 4 < this.length) {\n                hex = '0' + hex;\n            }\n        }\n\n        for (var i = 0; i < (hex.length / 8); i++) {\n            var slice = hex.slice(i * 8, i * 8 + 8);\n            this.wordArray[i] = parseInt(slice, 16);\n        }\n    }\n};\n\n/**\n * Returns the total number of bits in this BitArray.\n */\nBitArray.prototype.size = function() {\n    return this.length;\n};\n\n/**\n * Sets the bit at index to a value (boolean.)\n */\nBitArray.prototype.set = function(index, value) {\n    if (arguments.length !== 2) {\n        throw 'Index and value are required arguments.';\n    }\n    if (index > this.length - 1) {\n        throw 'Index too large.' + index + ' ' + this.length;\n    }\n    var wordOffset = Math.floor(index / 32);\n    // The underlying byte buffer will be initialized to zeros.\n    var bitOffset = index - wordOffset * 32;\n    if (value) {\n        this.wordArray[wordOffset] |= (1 << bitOffset);\n    } else {\n        this.wordArray[wordOffset] &= ~(1 << bitOffset);\n    }\n    return this;\n};\n\n/**\n * Toggles the bit at index. If the bit is on, it is turned off. Likewise, if the bit is off it is turned on.\n */\nBitArray.prototype.toggle = function(index) {\n    if (index > this.length - 1) {\n        throw 'Index too large.';\n    }\n    var wordOffset = Math.floor(index / 32);\n    var bitOffset = index - wordOffset * 32;\n    this.wordArray[wordOffset] ^= 1 << bitOffset;\n    return this;\n};\n\n/**\n * Returns the value of the bit at index (boolean.)\n */\nBitArray.prototype.get = function(index) {\n    if (index > this.length - 1) {\n        throw 'Index too large.';\n    }\n    var wordOffset = Math.floor(index / 32);\n    var bitOffset = index - wordOffset * 32;\n    return !! (this.wordArray[wordOffset] & (1 << bitOffset));\n};\n\n/**\n * Resets the BitArray so that it is empty and can be re-used.\n */\nBitArray.prototype.reset = function() {\n    this.buffer = new ArrayBuffer(Math.ceil(this.length / 32) * 4);\n    this.wordArray = new Uint32Array(this.buffer);\n    return this;\n};\n\n/**\n * Returns a copy of this BitArray.\n */\nBitArray.prototype.copy = function() {\n    var cp = new BitArray(this.length);\n    for (var i = 0; i < this.wordArray.length; i++) {\n        cp.wordArray[i] = this.wordArray[i];\n    }\n    return cp;\n};\n\n/**\n * Returns true if this BitArray equals another. Two BitArrays are considered\n * equal if both have the same length and bit pattern.\n */\nBitArray.prototype.equals = function(x) {\n    if (this.length !== x.length) {\n        return false;\n    }\n    for (var i = 0; i < this.wordArray.length; i++) {\n        if (this.wordArray[i] !== x.wordArray[i]) {\n            return false;\n        }\n    }\n    return true;\n};\n\n/**\n * Returns the JSON representation of this BitArray.\n */\nBitArray.prototype.toJSON = function() {\n    return JSON.stringify(this.toArray());\n};\n\n/**\n * Returns a string representation of the BitArray with bits\n * in mathemetical order.\n */\nBitArray.prototype.toBinaryString = function () {\n\treturn this.toArray().map(function (value) {\n\t\treturn value ? '1' : '0';\n\t}).reverse().join('');\n};\n\n/**\n * Returns a hexadecimal string representation of the BitArray\n * with bits in logical order.\n */\nBitArray.prototype.toHexString = function () {\n    var result = [];\n\n    for (var i = 0; i < this.wordArray.length; i += 1) {\n        //result.push(this.wordArray[i].toString(16));\n        result.push(('00000000' + (this.wordArray[i] >>> 0).toString(16)).slice(-8));\n    }\n    return result.join('');\n};\n\n/**\n * Returns a string representation of the BitArray with bits\n * in logical order.\n */\nBitArray.prototype.toString = function() {\n    return this.toArray().map(function(value) {\n        return value ? '1': '0';\n    }).join('');\n};\n\n/**\n * Convert the BitArray to an Array of boolean values (slow).\n */\nBitArray.prototype.toArray = function() {\n    var result = [];\n    for (var i = 0; i < this.length; i++) {\n        result.push(Boolean(this.get(i)));\n    }\n    return result;\n};\n\n/**\n * Returns the total number of bits set to one in this BitArray.\n */\nBitArray.prototype.count = function() {\n    var total = 0;\n    for (var i = 0; i < this.wordArray.length; i++) {\n        x = this.wordArray[i];\n        // count bits of each 2-bit chunk\n        x = x - ((x >> 1) & 0x55555555);\n        // count bits of each 4-bit chunk\n        x = (x & 0x33333333) + ((x >> 2) & 0x33333333);\n        // count bits of each 8-bit chunk\n        x = x + (x >> 4);\n        // mask out junk\n        x &= 0xF0F0F0F;\n        // add all four 8-bit chunks\n        total += (x * 0x01010101) >> 24;\n    }\n    return total;\n};\n\n/**\n * Inverts this BitArray.\n */\nBitArray.prototype.not = function() {\n    for (var i = 0; i < this.wordArray.length; i++) {\n        this.wordArray[i] = ~(this.wordArray[i]);\n    }\n    return this;\n};\n\n/**\n * Bitwise OR on the values of this BitArray using BitArray x.\n */\nBitArray.prototype.or = function(x) {\n    if (this.length !== x.length) {\n        throw 'Arguments must be of the same length.';\n    }\n    for (var i = 0; i < this.wordArray.length; i++) {\n        this.wordArray[i] |= x.wordArray[i];\n    }\n    return this;\n};\n\n/**\n * Bitwise AND on the values of this BitArray using BitArray x.\n */\nBitArray.prototype.and = function(x) {\n    if (this.length !== x.length) {\n        throw 'Arguments must be of the same length.';\n    }\n    for (var i = 0; i < this.wordArray.length; i++) {\n        this.wordArray[i] &= x.wordArray[i];\n    }\n    return this;\n};\n\n/**\n * Bitwise XOR on the values of this BitArray using BitArray x.\n */\nBitArray.prototype.xor = function(x) {\n    if (this.length !== x.length) {\n        throw 'Arguments must be of the same length.';\n    }\n    for (var i = 0; i < this.wordArray.length; i++) {\n        this.wordArray[i] ^= x.wordArray[i];\n    }\n    return this;\n};\n\nmodule.exports = BitArray;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/bit-array/lib/bit-typed-array.js\n// module id = 7\n// module chunks = 0","import Occupant from './occupant';\n\nexport const OCCUPANT_TYPE_ACORN_PILE = 3;\n\nclass AcornPile extends Occupant {\n  constructor(cell) {\n    super(cell);\n    this.color = \"#965015\";\n  }\n\n  receiveVisitor(visitor) {\n    visitor.receiveAcorn();\n  }\n\n  getType() {\n    return OCCUPANT_TYPE_ACORN_PILE;\n  }\n}\n\nexport default AcornPile;\n\n\n\n// WEBPACK FOOTER //\n// ./lib/occupants/acorn_pile.js","import Occupant from './occupant.js';\n\nexport const OCCUPANT_TYPE_GRASSY_PATCH = 4;\n\nclass GrassyPatch extends Occupant {\n  constructor(cell) {\n    super(cell);\n    this.color = \"#68ba39\";\n  }\n\n  receiveVisitor(visitor) {\n    visitor.stashAcorns();\n  }\n\n  getType() {\n    return OCCUPANT_TYPE_GRASSY_PATCH;\n  }\n\n}\n\nexport default GrassyPatch;\n\n\n\n// WEBPACK FOOTER //\n// ./lib/occupants/grassy_patch.js"],"sourceRoot":""}